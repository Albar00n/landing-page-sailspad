/*!
 * simpleParallax.min - simpleParallax is a simple JavaScript library that gives your website parallax animations on any images or videos,
 * @date: 09-06-2020 12:9:37,
 * @version: 5.5.1,
 * @link: https://simpleparallax.com/
 */ !(function (b, a) {
	"object" == typeof exports && "object" == typeof module
		? (module.exports = a())
		: "function" == typeof define && define.amd
		? define("simpleParallax", [], a)
		: "object" == typeof exports
		? (exports.simpleParallax = a())
		: (b.simpleParallax = a());
})(window, function () {
	return (function (b) {
		var c = {};
		function a(d) {
			if (c[d]) return c[d].exports;
			var e = (c[d] = { i: d, l: !1, exports: {} });
			return b[d].call(e.exports, e, e.exports, a), (e.l = !0), e.exports;
		}
		return (
			(a.m = b),
			(a.c = c),
			(a.d = function (b, c, d) {
				a.o(b, c) || Object.defineProperty(b, c, { enumerable: !0, get: d });
			}),
			(a.r = function (a) {
				"undefined" != typeof Symbol &&
					Symbol.toStringTag &&
					Object.defineProperty(a, Symbol.toStringTag, { value: "Module" }),
					Object.defineProperty(a, "__esModule", { value: !0 });
			}),
			(a.t = function (b, c) {
				if (
					(1 & c && (b = a(b)),
					8 & c || (4 & c && "object" == typeof b && b && b.__esModule))
				)
					return b;
				var d = Object.create(null);
				if (
					(a.r(d),
					Object.defineProperty(d, "default", { enumerable: !0, value: b }),
					2 & c && "string" != typeof b)
				)
					for (var e in b)
						a.d(
							d,
							e,
							function (a) {
								return b[a];
							}.bind(null, e),
						);
				return d;
			}),
			(a.n = function (c) {
				var b =
					c && c.__esModule
						? function () {
								return c.default;
						  }
						: function () {
								return c;
						  };
				return a.d(b, "a", b), b;
			}),
			(a.o = function (a, b) {
				return Object.prototype.hasOwnProperty.call(a, b);
			}),
			(a.p = ""),
			a((a.s = 0))
		);
	})([
		function (c, a, b) {
			"use strict";
			function d(d, c) {
				for (var b = 0; b < c.length; b++) {
					var a = c[b];
					(a.enumerable = a.enumerable || !1),
						(a.configurable = !0),
						"value" in a && (a.writable = !0),
						Object.defineProperty(d, a.key, a);
				}
			}
			b.r(a),
				b.d(a, "default", function () {
					return s;
				});
			var e = new ((function () {
					var a, b, c;
					function e() {
						!(function (a, b) {
							if (!(a instanceof b))
								throw new TypeError("Cannot call a class as a function");
						})(this, e),
							(this.positions = { top: 0, bottom: 0, height: 0 });
					}
					return (
						(a = e),
						(b = [
							{
								key: "setViewportTop",
								value: function (a) {
									return (
										(this.positions.top = a ? a.scrollTop : window.pageYOffset),
										this.positions
									);
								},
							},
							{
								key: "setViewportBottom",
								value: function () {
									return (
										(this.positions.bottom =
											this.positions.top + this.positions.height),
										this.positions
									);
								},
							},
							{
								key: "setViewportAll",
								value: function (a) {
									return (
										(this.positions.top = a ? a.scrollTop : window.pageYOffset),
										(this.positions.height = a
											? a.clientHeight
											: document.documentElement.clientHeight),
										(this.positions.bottom =
											this.positions.top + this.positions.height),
										this.positions
									);
								},
							},
						]),
						d(a.prototype, b),
						c && d(a, c),
						e
					);
				})())(),
				f = function (a) {
					return NodeList.prototype.isPrototypeOf(a) ||
						HTMLCollection.prototype.isPrototypeOf(a)
						? Array.from(a)
						: "string" == typeof a || a instanceof String
						? document.querySelectorAll(a)
						: [a];
				},
				g = (function () {
					for (
						var a,
							c =
								"transform webkitTransform mozTransform oTransform msTransform".split(
									" ",
								),
							b = 0;
						void 0 === a;

					)
						(a =
							void 0 !== document.createElement("div").style[c[b]]
								? c[b]
								: void 0),
							(b += 1);
					return a;
				})();
			function h(c, a) {
				(null == a || a > c.length) && (a = c.length);
				for (var b = 0, d = new Array(a); b < a; b++) d[b] = c[b];
				return d;
			}
			function i(d, c) {
				for (var b = 0; b < c.length; b++) {
					var a = c[b];
					(a.enumerable = a.enumerable || !1),
						(a.configurable = !0),
						"value" in a && (a.writable = !0),
						Object.defineProperty(d, a.key, a);
				}
			}
			var j = (function () {
				var a, b, c;
				function d(b, c) {
					var a,
						e = this;
					!(function (a, b) {
						if (!(a instanceof b))
							throw new TypeError("Cannot call a class as a function");
					})(this, d),
						(this.element = b),
						(this.elementContainer = b),
						(this.settings = c),
						(this.isVisible = !0),
						(this.isInit = !1),
						(this.oldTranslateValue = -1),
						(this.init = this.init.bind(this)),
						"video" === (a = b).tagName.toLowerCase() ||
						(a &&
							a.complete &&
							(void 0 === a.naturalWidth || 0 !== a.naturalWidth))
							? this.init()
							: this.element.addEventListener("load", function () {
									setTimeout(function () {
										e.init(!0);
									}, 50);
							  });
				}
				return (
					(a = d),
					(b = [
						{
							key: "init",
							value: function (a) {
								var b = this;
								this.isInit ||
									(a && (this.rangeMax = null),
									this.element.closest(".simpleParallax") ||
										(!1 === this.settings.overflow &&
											this.wrapElement(this.element),
										this.setTransformCSS(),
										this.getElementOffset(),
										this.intersectionObserver(),
										this.getTranslateValue(),
										this.animate(),
										this.settings.delay > 0 &&
											setTimeout(function () {
												b.setTransitionCSS();
											}, 10),
										(this.isInit = !0)));
							},
						},
						{
							key: "wrapElement",
							value: function () {
								var c =
										this.settings.customWrapper &&
										this.element.closest(this.settings.customWrapper),
									b = this.element.closest("picture") || this.element,
									a = document.createElement("div");
								c && (a = this.element.closest(this.settings.customWrapper)),
									a.classList.add("simpleParallax"),
									(a.style.overflow = "hidden"),
									c || (b.parentNode.insertBefore(a, b), a.appendChild(b)),
									(this.elementContainer = a);
							},
						},
						{
							key: "unWrapElement",
							value: function () {
								var b,
									a = this.elementContainer;
								this.settings.customWrapper &&
								this.element.closest(this.settings.customWrapper)
									? (a.classList.remove("simpleParallax"),
									  (a.style.overflow = ""))
									: a.replaceWith.apply(
											a,
											(function (a) {
												if (Array.isArray(a)) return h(a);
											})((b = a.childNodes)) ||
												(function (a) {
													if (
														"undefined" != typeof Symbol &&
														Symbol.iterator in Object(a)
													)
														return Array.from(a);
												})(b) ||
												(function (a, c) {
													if (a) {
														if ("string" == typeof a) return h(a, c);
														var b = Object.prototype.toString
															.call(a)
															.slice(8, -1);
														if (
															("Object" === b &&
																a.constructor &&
																(b = a.constructor.name),
															"Map" === b || "Set" === b)
														)
															return Array.from(a);
														if (
															"Arguments" === b ||
															/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)
														)
															return h(a, c);
													}
												})(b) ||
												(function () {
													throw new TypeError(
														"Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
													);
												})(),
									  );
							},
						},
						{
							key: "setTransformCSS",
							value: function () {
								!1 === this.settings.overflow &&
									(this.element.style[g] = "scale(".concat(
										this.settings.scale,
										")",
									)),
									(this.element.style.willChange = "transform");
							},
						},
						{
							key: "setTransitionCSS",
							value: function () {
								this.element.style.transition = "transform "
									.concat(this.settings.delay, "s ")
									.concat(this.settings.transition);
							},
						},
						{
							key: "unSetStyle",
							value: function () {
								(this.element.style.willChange = ""),
									(this.element.style[g] = ""),
									(this.element.style.transition = "");
							},
						},
						{
							key: "getElementOffset",
							value: function () {
								var a = this.elementContainer.getBoundingClientRect();
								if (
									((this.elementHeight = a.height),
									(this.elementTop = a.top + e.positions.top),
									this.settings.customContainer)
								) {
									var b = this.settings.customContainer.getBoundingClientRect();
									this.elementTop = a.top - b.top + e.positions.top;
								}
								this.elementBottom = this.elementHeight + this.elementTop;
							},
						},
						{
							key: "buildThresholdList",
							value: function () {
								for (var b = [], a = 1; a <= this.elementHeight; a++) {
									var c = a / this.elementHeight;
									b.push(c);
								}
								return b;
							},
						},
						{
							key: "intersectionObserver",
							value: function () {
								var a = { root: null, threshold: this.buildThresholdList() };
								(this.observer = new IntersectionObserver(
									this.intersectionObserverCallback.bind(this),
									a,
								)),
									this.observer.observe(this.element);
							},
						},
						{
							key: "intersectionObserverCallback",
							value: function (a) {
								var b = this;
								a.forEach(function (a) {
									a.isIntersecting ? (b.isVisible = !0) : (b.isVisible = !1);
								});
							},
						},
						{
							key: "checkIfVisible",
							value: function () {
								return (
									this.elementBottom > e.positions.top &&
									this.elementTop < e.positions.bottom
								);
							},
						},
						{
							key: "getRangeMax",
							value: function () {
								var a = this.element.clientHeight;
								this.rangeMax = a * this.settings.scale - a;
							},
						},
						{
							key: "getTranslateValue",
							value: function () {
								var a = (
									(e.positions.bottom - this.elementTop) /
									((e.positions.height + this.elementHeight) / 100)
								).toFixed(1);
								return (
									(a = Math.min(100, Math.max(0, a))),
									0 !== this.settings.maxTransition &&
										a > this.settings.maxTransition &&
										(a = this.settings.maxTransition),
									this.oldPercentage !== a &&
										(this.rangeMax || this.getRangeMax(),
										(this.translateValue = (
											(a / 100) * this.rangeMax -
											this.rangeMax / 2
										).toFixed(0)),
										this.oldTranslateValue !== this.translateValue &&
											((this.oldPercentage = a),
											(this.oldTranslateValue = this.translateValue),
											!0))
								);
							},
						},
						{
							key: "animate",
							value: function () {
								var c,
									a = 0,
									b = 0;
								(this.settings.orientation.includes("left") ||
									this.settings.orientation.includes("right")) &&
									(b = "".concat(
										this.settings.orientation.includes("left")
											? -1 * this.translateValue
											: this.translateValue,
										"px",
									)),
									(this.settings.orientation.includes("up") ||
										this.settings.orientation.includes("down")) &&
										(a = "".concat(
											this.settings.orientation.includes("up")
												? -1 * this.translateValue
												: this.translateValue,
											"px",
										)),
									(c =
										!1 === this.settings.overflow
											? "translate3d("
													.concat(b, ", ")
													.concat(a, ", 0) scale(")
													.concat(this.settings.scale, ")")
											: "translate3d(".concat(b, ", ").concat(a, ", 0)")),
									(this.element.style[g] = c);
							},
						},
					]),
					i(a.prototype, b),
					c && i(a, c),
					d
				);
			})();
			function k(a) {
				return (
					(function (a) {
						if (Array.isArray(a)) return m(a);
					})(a) ||
					(function (a) {
						if ("undefined" != typeof Symbol && Symbol.iterator in Object(a))
							return Array.from(a);
					})(a) ||
					l(a) ||
					(function () {
						throw new TypeError(
							"Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
						);
					})()
				);
			}
			function l(a, c) {
				if (a) {
					if ("string" == typeof a) return m(a, c);
					var b = Object.prototype.toString.call(a).slice(8, -1);
					return (
						"Object" === b && a.constructor && (b = a.constructor.name),
						"Map" === b || "Set" === b
							? Array.from(a)
							: "Arguments" === b ||
							  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)
							? m(a, c)
							: void 0
					);
				}
			}
			function m(c, a) {
				(null == a || a > c.length) && (a = c.length);
				for (var b = 0, d = new Array(a); b < a; b++) d[b] = c[b];
				return d;
			}
			function n(d, c) {
				for (var b = 0; b < c.length; b++) {
					var a = c[b];
					(a.enumerable = a.enumerable || !1),
						(a.configurable = !0),
						"value" in a && (a.writable = !0),
						Object.defineProperty(d, a.key, a);
				}
			}
			var o,
				p,
				q = !1,
				r = [],
				s = (function () {
					var a, b, c;
					function d(c, e) {
						if (
							((function (a, b) {
								if (!(a instanceof b))
									throw new TypeError("Cannot call a class as a function");
							})(this, d),
							c &&
								Element.prototype.closest &&
								"IntersectionObserver" in window)
						) {
							if (
								((this.elements = f(c)),
								(this.defaults = {
									delay: 0,
									orientation: "up",
									scale: 1.3,
									overflow: !1,
									transition: "cubic-bezier(0,0,0,1)",
									customContainer: !1,
									customWrapper: !1,
									maxTransition: 0,
								}),
								(this.settings = Object.assign(this.defaults, e)),
								this.settings.customContainer)
							) {
								var a,
									b,
									g =
										((a = f(this.settings.customContainer)),
										(b = 1),
										(function (a) {
											if (Array.isArray(a)) return a;
										})(a) ||
											(function (d, e) {
												if (
													"undefined" != typeof Symbol &&
													Symbol.iterator in Object(d)
												) {
													var a = [],
														b = !0,
														f = !1,
														g = void 0;
													try {
														for (
															var h, c = d[Symbol.iterator]();
															!(b = (h = c.next()).done) &&
															(a.push(h.value), !e || a.length !== e);
															b = !0
														);
													} catch (i) {
														(f = !0), (g = i);
													} finally {
														try {
															b || null == c.return || c.return();
														} finally {
															if (f) throw g;
														}
													}
													return a;
												}
											})(a, b) ||
											l(a, b) ||
											(function () {
												throw new TypeError(
													"Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
												);
											})());
								this.customContainer = g[0];
							}
							(this.lastPosition = -1),
								(this.resizeIsDone = this.resizeIsDone.bind(this)),
								(this.refresh = this.refresh.bind(this)),
								(this.proceedRequestAnimationFrame =
									this.proceedRequestAnimationFrame.bind(this)),
								this.init();
						}
					}
					return (
						(a = d),
						(b = [
							{
								key: "init",
								value: function () {
									var a = this;
									e.setViewportAll(this.customContainer),
										(r = [].concat(
											k(
												this.elements.map(function (b) {
													return new j(b, a.settings);
												}),
											),
											k(r),
										)),
										q ||
											(this.proceedRequestAnimationFrame(),
											window.addEventListener("resize", this.resizeIsDone),
											(q = !0));
								},
							},
							{
								key: "resizeIsDone",
								value: function () {
									clearTimeout(p), (p = setTimeout(this.refresh, 200));
								},
							},
							{
								key: "proceedRequestAnimationFrame",
								value: function () {
									var a = this;
									e.setViewportTop(this.customContainer),
										this.lastPosition !== e.positions.top
											? (e.setViewportBottom(),
											  r.forEach(function (b) {
													a.proceedElement(b);
											  }),
											  (o = window.requestAnimationFrame(
													this.proceedRequestAnimationFrame,
											  )),
											  (this.lastPosition = e.positions.top))
											: (o = window.requestAnimationFrame(
													this.proceedRequestAnimationFrame,
											  ));
								},
							},
							{
								key: "proceedElement",
								value: function (a) {
									(this.customContainer ? a.checkIfVisible() : a.isVisible) &&
										a.getTranslateValue() &&
										a.animate();
								},
							},
							{
								key: "refresh",
								value: function () {
									e.setViewportAll(this.customContainer),
										r.forEach(function (a) {
											a.getElementOffset(), a.getRangeMax();
										}),
										(this.lastPosition = -1);
								},
							},
							{
								key: "destroy",
								value: function () {
									var b = this,
										a = [];
									(r = r.filter(function (c) {
										return b.elements.includes(c.element) ? (a.push(c), !1) : c;
									})),
										a.forEach(function (a) {
											a.unSetStyle(),
												!1 === b.settings.overflow && a.unWrapElement();
										}),
										r.length ||
											(window.cancelAnimationFrame(o),
											window.removeEventListener("resize", this.refresh));
								},
							},
						]),
						n(a.prototype, b),
						c && n(a, c),
						d
					);
				})();
		},
	]).default;
});
